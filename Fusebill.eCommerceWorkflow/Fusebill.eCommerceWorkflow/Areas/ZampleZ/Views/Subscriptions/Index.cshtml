@using Fusebill.ApiWrapper


@model Fusebill.eCommerceWorkflow.Areas.ZampleZ.Models.CustomersAndSubscriptionsVM


<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>Index</title>

    @*To make dropdown*@
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.3/jquery.min.js"></script>
    <script src="http://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/js/bootstrap.min.js"></script>
    
    @*To make datepicker*@
    <script src="~/Scripts/jquery-1.8.2.min.js"></script>
    <script src="~/Scripts/jquery-ui-1.8.24.min.js"></script>

    <link href="~/Scripts/jquery-ui.structure.min.css" rel="stylesheet" />
    <link href="~/Scripts/jquery-ui.theme.min.css" rel="stylesheet" />

    <script src="~/Scripts/bootstrap.min.js"></script>
    <link href="~/Content/bootstrap.css" rel="stylesheet" />

    @*Datetime conversion*@
    <script src="~/Scripts/moment.js"></script>
    <script>
        $(document).ready(function() {
            $("#datepicker").datepicker();
        });
    </script>

</head>
<body>


    @Html.Partial("~/Areas/ZampleZ/Views/Shared/Layout.cshtml");

    <div>
        @foreach (var customer in Model.AvailableCustomers)
        {
            <div id="@customer.Id" class="panel panel-primary panel-primary-hover col-xs-12 col-md-4" onclick="loadSubscriptions(@customer.Id, '@customer.FirstName', '@customer.LastName')">
                <h3 class="panel-title panel-heading">Demo Customer</h3>
                <div class="panel-body">

                    <table class="table table-condensed ">
                        <tbody>
                            <tr>
                                <td><strong>First name : </strong></td>
                                <td>@customer.FirstName</td>
                            </tr>
                            <tr>
                                <td><strong>Last name : </strong></td>
                                <td>@customer.LastName</td>
                            </tr>
                            <tr>
                                <td><strong>Company name: </strong></td>
                                <td>@customer.CompanyName</td>
                            </tr>
                            <tr>
                                @foreach (var plan in Model.AvailablePlans)
                                {
                                    <td>
                                        <button type="button" class="col-md-12 btn btn-warning" onclick="addSubscription(@customer.Id, @plan.PlanFrequencies[0].Id)">
                                            @if (plan.PlanFrequencies[0].Id == 10802244)
                                            { <p style="font-weight:bold">Add Bronze Plan</p> }
                                            else if (plan.PlanFrequencies[0].Id == 10832272)
                                            { <p style="font-weight:bold">Add Gold Plan</p> }
                                        </button>
                                    </td>
                                }
                            </tr>
                        </tbody>
                    </table>

                    @*<button type="button" onclick="cancelCustomer(@customer.Id)">Cancel customer with ID of @customer.Id</button>*@
                </div>
            </div>
        }
    </div>
    @*<button type="button" onclick="reverseCharge(4612017)">Reverse charge for Sevice 7 of Demo Customer 2</button>*@


    <div>&nbsp;</div>
    <div>&nbsp;</div>
    <div id="loadingDiv" style="text-align:center"><img src="~/Content/pacman-loader.gif" /></div>

    <div id="divItems">

    </div>

    <script>

        $(function() {
            $( "#datepicker" ).datepicker();
        });

        //div that contains the text (later to become an animation) to show when ajax is getting infortmation
        var $loading = $("#loadingDiv").hide();

        var subscriptionsArray = new Array();
        var model ;

        //number of timestamps that exist
        var timestampCount = 3;
        var subscriptionOverrideCount = 2;
        var buttonCount = 5;
        var activateInputCount = 2;
        var provisionInputCount = 2;
        var cusID;

        $(document).ready(function () {
            model = @Html.HtmlConvertToJson(Model);
        });
        $(document)
        .ajaxStart(function () {
            $loading.show();
        })
        .ajaxStop(function() {
            $loading.hide();
        });



        function addSubscription(customerID, planFrequencyID)
        {
            //alert("addSUbscription was called");
            //var addSubscriptionInputsArray = new Array();

            //var paragraph = document.createElement("p");
            //paragraph.innerHTML = "<strong>Subscription Override Name: </strong>" ;
            //$("#divItems").append(paragraph);

            //var input = document.createElement("input");
            //$("#divItems").append(input);
            //addSubscriptionInputsArray[0] = input;


            //var paragraph = document.createElement("p");
            //paragraph.innerHTML = "<strong>Subscription Override Description : </strong>" ;
            //$("#divItems").append(paragraph);

            //var input = document.createElement("input");
            //$("#divItems").append(input);
            //addSubscriptionInputsArray[1] = input;

            
            //var paragraph = document.createElement("p");
            //paragraph.innerHTML = "<strong>Subscription Reference: </strong>" ;
            //$("#divItems").append(paragraph);

            //var input = document.createElement("input");
            //$("#divItems").append(input);
            //addSubscriptionInputsArray[2] = input;


            //var paragraph = document.createElement("p");
            //paragraph.innerHTML = "<strong>Subscription Remaining Override : </strong>" ;
            //$("#divItems").append(paragraph);

            //var input = document.createElement("input");
            //$("#divItems").append(input);
            //addSubscriptionInputsArray[3] = input;


            //var paragraph = document.createElement("p");
            //paragraph.innerHTML = "<strong>Subscription Scheduled Activation TimeStamp : </strong>" ;
            //$("#divItems").append(paragraph);

            //var input = document.createElement("input");
            //$("#divItems").append(input);
            //addSubscriptionInputsArray[4] = input;

            //var button = document.createElement("button");
            //overrideButton.innerHTML = "Add subscription";
            //overrideButton.className = "btn btn-success";
            //overrideButton.style.float = "right";
            //overrideButton.style.display = "inline";


            var subscription = { CustomerID: customerID ,
                PlanFrequencyID: planFrequencyID };

            $.ajax({
                type: "POST",
                url: "Subscriptions/CreateSubscription",
                dataType: "json",
                data: subscription,
                success: function () {
                    alert("Added a subscription to customer");
                    var div = document.getElementById("divItems");
                    while (div.firstChild) {
                        div.removeChild(div.firstChild);
                    }
                    alert("Finished while loop");
                    $("#"+cusID).trigger("click");
                },
                //error: alert("Darn!")
            });
        }


        function reverseCharge(chargeID)
        {
            var customer = { CustomerID: chargeID};

            $.ajax({
                type: "POST",
                url: "Subscriptions/ReverseCharge",
                dataType: "json",
                data: customer,
                success: function () {
                    alert("Reverse charge applied");
                },
                //error: alert("Darn!")
            });
        }


        function cancelCustomer(id)
        {
            var customer = { CustomerID: id};

            $.ajax({
                type: "POST",
                url: "Subscriptions/CancelCustomer",
                dataType: "json",
                data: customer,
                success: function () {
                    alert("Customer canceled");
                },
                //error: alert("Darn!")
            });
        }


        function loadSubscriptions(id, firstName, lastName)
        {
            cusID = id;
            var customer = { CustomerID: id};

            $.ajax({
                type: "POST",
                url: "Subscriptions/ListSubscriptionsForCustomer",
                dataType: "json",
                data: customer,
                success: function (data) {
                    alert("Successfully returned");
                    var div = document.getElementById("divItems");
                    //refresh the divItems, which stores the subscription informations
                    while (div.firstChild) {
                        div.removeChild(div.firstChild);
                    }
                    
                    returnedData = data;
                    showAllSubscriptions(returnedData, firstName, lastName);
                },
            });
        }

        function showAllSubscriptions(returnedData, customerFirstName, customerLastName){
            //each subscription is called displayed

         

            var h2 = document.createElement("h2");
            h2.className = "jumbotron";
            h2.style.textAlign = "center";
            h2.innerHTML = "Subscriptions for " + customerFirstName + " " + customerLastName;
     

            $("#divItems").append(h2);



            for (var i = 0; i < returnedData.length; i++)
            {
                //main div, inside is a button, which commands another div
                var subscriptionDiv = document.createElement("div");
                subscriptionDiv.id = "subscriptionDiv" + i;
                subscriptionDiv.setAttribute("class", "btn col-md-10 col-md-offset-1");
                $("#divItems").append(subscriptionDiv);

                var button = document.createElement("button");
                button.setAttribute("data-toggle", "collapse");
                button.setAttribute("data-target", "#subscriptionComponentDiv"+i);
                button.setAttribute("class", "btn col-md-10 col-md-offset-1");
                button.id = "button"+i;
                $("#subscriptionDiv"+i).append(button);



                var subscriptionComponentDiv = document.createElement("p");
                subscriptionComponentDiv.id = "subscriptionComponentDiv" + i;
                subscriptionComponentDiv.setAttribute("class", "collapse col-md-10 col-md-offset-1");
                $("#subscriptionDiv"+i).append(subscriptionComponentDiv);

                showSubscription(returnedData[i], returnedData[i].Id, i);
            }
        }

        function showSubscription(subscription, subscriptionID, divIndex)  //index is for the subscriptionDiv + i id
        {
            var subscriptionArray = new Array();
            //instead of creating an array to hold all overrides for a subscription, create an array of subscription products, each holding their own info
            subscriptionArray["productQuantityOverrides"] = new Array(subscription.SubscriptionProducts.length);
            subscriptionArray["productPriceOverrides"] = new Array(subscription.SubscriptionProducts.length);
            subscriptionArray["overrideButtons"] = new Array (subscription.SubscriptionProducts.length);
            subscriptionArray["subscriptionOverrides"] = new Array(subscriptionOverrideCount);
            subscriptionArray["reference"] = document.createElement("input");
            subscriptionArray["timestamps"] = new Array();
            subscriptionArray["remainingInterval"] = document.createElement("input");
            subscriptionArray["buttons"] = new Array(buttonCount);
            subscriptionArray["activateInputs"] = new Array(activateInputCount);
            subscriptionArray["provisionInputs"] = new Array(provisionInputCount);


            showSubscriptionText(subscription, subscriptionArray["subscriptionOverrides"], subscriptionArray["reference"], subscriptionArray["timestamps"], subscriptionArray["remainingInterval"], divIndex);
            //showSubscriptionOverrides(subscriptionArray["subscriptionOverrides"], divIndex);

            showSubscriptionProducts(subscription, subscription.SubscriptionProducts, subscriptionArray["overrideButtons"], subscriptionArray["productQuantityOverrides"], subscriptionArray["productPriceOverrides"], divIndex);
            //showReference(subscriptionArray["reference"], divIndex);
            //showTimestamps(subscriptionArray["timestamps"], divIndex);
            //showRemainingInterval(subscriptionArray["remainingInterval"], divIndex);
            showButtons(subscription, subscriptionArray["buttons"], subscriptionArray["activateInputs"], subscriptionArray["provisionInputs"], subscriptionID, divIndex);

            subscriptionsArray[subscriptionID.toString()] = subscriptionArray;
        }

        function showSubscriptionText(subscription, subscriptionOverridesArray, referenceArray, timestampArray, remainingIntervalArray, divIndex)
        {
            //each button has two rows. The top has titles: "Plan Name", "Status", and "Amount"
            //the bottom row display has the fields that corresponds to the titles
            var divRowTitle = document.createElement("div");
            divRowTitle.className = "row";


            var titlePlanName = document.createElement("p");
            titlePlanName.className = "col-md-2 text-center";
            titlePlanName.innerHTML = "Plan Name ";
            divRowTitle.appendChild(titlePlanName);

            var titleStatus = document.createElement("p");
            titleStatus.className = "col-md-2 col-md-offset-3 text-center" ;
            titleStatus.innerHTML = "Status";
            divRowTitle.appendChild(titleStatus);

            var titleAmount = document.createElement("p");
            titleAmount.className = "col-md-2 col-md-offset-3 text-center";
            titleAmount.innerHTML = "Amount";
            divRowTitle.appendChild(titleAmount);



            var divRowSpecific = document.createElement("div");
            divRowSpecific.className = "row";

            var specificPlanName = document.createElement("p");
            specificPlanName.className = "col-md-2 text-center";
            specificPlanName.innerHTML = subscription.PlanName;
            divRowSpecific.appendChild(specificPlanName);

            var specificStatus = document.createElement("p");
            specificStatus.className = "col-md-2 col-md-offset-3 text-center";
            specificStatus.innerHTML = subscription.Status;
            divRowSpecific.appendChild(specificStatus);

            var specificAmount = document.createElement("p");
            specificAmount.className = "col-md-2 col-md-offset-3 text-center";
            specificAmount.innerHTML = subscription.Amount
            divRowSpecific.appendChild(specificAmount);

            divRowTitle.appendChild(divRowSpecific);

            $("#button"+divIndex).append(divRowTitle);

            if (subscription.Status == "Active")
            {
                $("#button"+divIndex).addClass("btn-success");
            }
            else if (subscription.Status == "Cancelled")
            {
                $("#button"+divIndex).addClass("btn-cancelled-Fusebill");
            }
            else if(subscription.Status == "Draft")
            {
                $("#button"+divIndex).addClass("btn-draft-Fusebill");
            }
            else if(subscription.Status == "Provisioning")
            {
                $("#button"+divIndex).addClass("btn-warning");

            }

            var divPanel = document.createElement("div");
            divPanel.className = "panel panel-primary col-xs-12 col-md-12";

            var h3PanelHeader = document.createElement("h3");
            h3PanelHeader.innerHTML = "Subscription Information";
            h3PanelHeader.className  = "panel-title panel-heading";

            var panelBody = document.createElement("div");
            panelBody.className = "panel-body";
            panelBody.id = "informationPanelBody" + divIndex;
            //panelBody.appendChild(document.createTextNode("oswijfoiswejfoseijf"));


            divPanel.appendChild(h3PanelHeader);
            divPanel.appendChild(panelBody);
            $("#subscriptionComponentDiv"+divIndex).append(divPanel);

            //========================================================
            //=============== SHOWING TEXT AND OVERRIDES =============
            //========================================================

            if (subscription.Status != "Cancelled")
            {
                var subscriptionOverrideButton = document.createElement("button");
                subscriptionOverrideButton.innerHTML = "Add subscription overrides";

                subscriptionOverrideButton.className = "btn btn-success";
                subscriptionOverrideButton.style.float = "right";
                subscriptionOverrideButton.style.display = "inline";
                $("#informationPanelBody"+divIndex).append(subscriptionOverrideButton);
            }

          

            var paragraph = document.createElement("p");
            paragraph.innerHTML = "<strong>Subscription Name</strong>";
            if (subscription.Status != "Cancelled")
            {
                paragraph.style.marginLeft = "15em";
            }
            $("#informationPanelBody"+divIndex).append(paragraph);

            var paragraph = document.createElement("p");
            if (subscription.Status != "Cancelled")
            {
                paragraph.style.marginLeft = "15em";
            }
            paragraph.style.lineHeight = "0em";
            paragraph.innerHTML = subscription.PlanName;
            $("#informationPanelBody"+divIndex).append(paragraph);



           if (  (subscription.SubscriptionOverride === null) == false )
           {
               if ( (subscription.SubscriptionOverride.Name === null) == false)
               {
                   var paragraph = document.createElement("p");
                   paragraph.innerHTML = "<strong>Subscription Name Override</strong>";
                   $("#informationPanelBody"+divIndex).append(paragraph);

                   var paragraph = document.createElement("p");
                   paragraph.style.lineHeight = "0em";
                   paragraph.innerHTML = subscription.SubscriptionOverride.Name + "<br />" ;
                   $("#informationPanelBody"+divIndex).append(paragraph);
               }
            }

            if (subscription.Status != "Cancelled")
            {
                var input = document.createElement("input");
                input.placeholder = "Add Name Override";
                input.style.visibility = "hidden";
                $("#informationPanelBody"+divIndex).append(input);
                subscriptionOverridesArray[0] = input;
            }

            var a = document.createElement("br");
            $("#informationPanelBody"+divIndex).append(a);
            var paragraph = document.createElement("p");
            paragraph.innerHTML = "<strong>Subscription Description</strong>" ;
            $("#informationPanelBody"+divIndex).append(paragraph);

            var paragraph = document.createElement("p");
            paragraph.style.lineHeight = "0em";
            paragraph.innerHTML =  subscription.PlanDescription;
            $("#informationPanelBody"+divIndex).append(paragraph);

            if (  (subscription.SubscriptionOverride === null) == false )
            {
                if ( (subscription.SubscriptionOverride.Description === null) == false)
                {
                    var paragraph = document.createElement("p");
                    paragraph.innerHTML = "<strong>Subscription Description Override</strong>"; 
                    $("#informationPanelBody"+divIndex).append(paragraph);

                    var paragraph = document.createElement("p");
                    paragraph.innerHTML = subscription.SubscriptionOverride.Description + "<br />" ;
                    paragraph.style.lineHeight = "0em";
                    $("#informationPanelBody"+divIndex).append(paragraph);
                }
            }

            if (subscription.Status != "Cancelled")
            {
                var input = document.createElement("input");
                input.placeholder = "Add Description Override";
                input.style.visibility = "hidden";
                $("#informationPanelBody"+divIndex).append(input);
                subscriptionOverridesArray[1] = input;
            }


            var subscriptionReference;
            if (subscription.PlanReference == null)
            {
                subscriptionReference = "Not yet set";
            }
            else 
            {
                subscriptionReference = subscription.PlanReference;
            }

            $("#informationPanelBody"+divIndex).append(document.createElement("br"));
            var paragraph = document.createElement("p");
            paragraph.innerHTML = "<strong>Subscription Reference</strong>";
            $("#informationPanelBody"+divIndex).append(paragraph);

            var paragraph = document.createElement("p");
            paragraph.style.lineHeight = "0em";
            paragraph.innerHTML =  subscriptionReference + "<br />";
            $("#informationPanelBody"+divIndex).append(paragraph);

            if (subscription.Status != "Cancelled")
            {
                var input = document.createElement("input");
                input.placeholder = "Add Reference Override";
                input.style.visibility = "hidden";
                $("#informationPanelBody"+divIndex).append(input);
                referenceArray[0] = input;
            }            


           
            $("#informationPanelBody"+divIndex).append(document.createElement("br"));  
            var date = new Date(parseFloat(subscription.Created.replace("/Date(", "").replace(")/",""), 10));
            var paragraph = document.createElement("p");
            paragraph.innerHTML = "<strong>Subscription Creation Date</strong>";
            $("#informationPanelBody"+divIndex).append(paragraph);

            var paragraph = document.createElement("p");
            paragraph.innerHTML = "<br />" + date;
            paragraph.style.lineHeight = "0em";
            $("#informationPanelBody"+divIndex).append(paragraph);


            var date;
            if (subscription.ContractStartTimestamp == null)  {  date = "Not yet set"; }
            else
            {
                date = new Date(parseFloat(subscription.ContractStartTimestamp.replace("/Date(", "").replace(")/",""), 10));
            }

            $("#informationPanelBody"+divIndex).append(document.createElement("br"));
            var paragraph = document.createElement("p");
            paragraph.innerHTML = "<strong>Subscription Start Date</strong> ";
            $("#informationPanelBody"+divIndex).append(paragraph);

            var paragraph = document.createElement("p");
            paragraph.style.lineHeight = "0em";
            paragraph.innerHTML = date;
            $("#informationPanelBody"+divIndex).append(paragraph);

            if (subscription.Status != "Cancelled")
            {
                var inputStart = document.createElement("input");
                inputStart.id = "usingDatepickerStart" + divIndex;
                inputStart.placeholder = "Edit Start Date";
                inputStart.style.visibility = "hidden";
                timestampArray[0] = inputStart;
                $("#informationPanelBody"+divIndex).append(inputStart);
               
            }


            var date;
            if (subscription.ContractEndTimestamp == null)  {  date = "Not yet set"; }
            else
            {
                date =  new Date(parseInt(subscription.ContractEndTimestamp.replace("/Date(", "").replace(")/",""), 10));
            }
            $("#informationPanelBody"+divIndex).append(document.createElement("br"));
            var paragraph = document.createElement("p");
            paragraph.innerHTML = "<strong>Subscription End Date</strong>" ;
            $("#informationPanelBody"+divIndex).append(paragraph);

            var paragraph = document.createElement("p");
            paragraph.style.lineHeight = "0em";
            paragraph.innerHTML =  date;
            $("#informationPanelBody"+divIndex).append(paragraph);

            if (subscription.Status != "Cancelled")
            {
                var inputEnd = document.createElement("input");
                inputEnd.id = "usingDatepickerEnd" + divIndex;
                inputEnd.placeholder = "Edit End Date";
                inputEnd.style.visibility = "hidden";

                timestampArray[1] = inputEnd;
                $("#informationPanelBody"+divIndex).append(inputEnd);
            }
         
            if (subscription.Status != "Active" && subscription.Status != "Cancelled")
            {
                var paragraph = document.createElement("p");
                var date;
                if (subscription.ScheduledActivationTimestamp == null)  {  date = "Not yet set"; }
                else
                {
                    date =  new Date(parseFloat(subscription.ContractStartTimestamp.replace("/Date(", "").replace(")/",""), 10));
                }
                $("#informationPanelBody"+divIndex).append(document.createElement("br"));
                paragraph.innerHTML = "<strong>Subscription Scheduled Activation Date</strong>";
                $("#informationPanelBody"+divIndex).append(paragraph);

                var paragraph = document.createElement("p");
                paragraph.style.lineHeight = "0em";
                paragraph.innerHTML =  date;
                $("#informationPanelBody"+divIndex).append(paragraph);

                var inputScheduled = document.createElement("input");
                inputScheduled.id = "usingDatepickerScheduled" + divIndex;
                inputScheduled.placeholder = "Edit Activation Date";
                inputScheduled.style.visibility = "hidden";
                timestampArray[2] = inputScheduled;
                $("#informationPanelBody"+divIndex).append(inputScheduled);
            }
            

          

            var remaining;
            if (subscription.RemainingInterval === null)
            {
                remaining = "No remaining interval set";
            }
            else
            {
                remaining = subscription.RemainingInterval;
            }
            var paragraph = document.createElement("p");
            paragraph.innerHTML = "<strong>Subscription Remaining Interval</strong> ";
            $("#informationPanelBody"+divIndex).append(paragraph);

            var paragraph = document.createElement("p");
            paragraph.innerHTML = remaining;
            paragraph.style.lineHeight = "0em";
            $("#informationPanelBody"+divIndex).append(paragraph);

            if (subscription.Status != "Cancelled")
            {
                var input = document.createElement("input");
                input.placeholder = "Edit Remaining Interval";
                input.style.visibility = "hidden";
                $("#informationPanelBody"+divIndex).append(input);
                remainingIntervalArray[0] = input;
            }


            $("#usingDatepickerStart"+ divIndex).datepicker({
                minDate : 0,
                onClose: function( selectedDate ) {
                    $( "#usingDatepickerEnd" + divIndex).datepicker( "option", "minDate", selectedDate );
                    $( "#usingDatepickerScheduled" + divIndex).datepicker( "option", "minDate", selectedDate );
                }
            });

            $("#usingDatepickerEnd"+ divIndex).datepicker({
                onClose: function( selectedDate ) {
                    $( "#usingDatepickerStart" + divIndex).datepicker( "option", "maxDate", selectedDate );
                    $( "#usingDatepickerScheduled" + divIndex).datepicker( "option", "maxDate", selectedDate );

                }
            });


            $("#usingDatepickerScheduled" + divIndex).datepicker({
                onClose: function( selectedDate ) {
                    $( "#usingDatepickerStart" + divIndex).datepicker( "option", "maxDate", selectedDate );
                    $( "#usingDatepickerEnd" + divIndex).datepicker( "option", "minDate", selectedDate );
                }
            });

            if (subscription.Status != "Cancelled")
            {
                subscriptionOverrideButton.onclick = function() {
                    if (this.innerHTML == "Add subscription overrides")
                    {
                        //if we add overrides, let all override inputs be visible
                        for (var i = 0; i < subscriptionOverridesArray.length; i++)
                        {
                            subscriptionOverridesArray[i].style.visibility = "visible";
                        }


                        referenceArray[0].style.visibility = "visible";

                        for (var i = 0; i < timestampArray.length; i++)
                        {
                            timestampArray[i].style.visibility = "visible";
                        }

                        remainingIntervalArray[0].style.visibility = "visible";

                        this.innerHTML = "Remove subscription overrides";
                        this.style.backgroundColor = "red";
                    }
                    else
                    {
                        for (var i = 0; i < subscriptionOverridesArray.length; i++)
                        {
                            subscriptionOverridesArray[i].style.visibility = "hidden";
                            subscriptionOverridesArray[i].value = null;
                        }
                        referenceArray[0].style.visibility = "hidden";
                        referenceArray[0].value = null;


                        for (var i = 0; i < timestampArray.length; i++)
                        {
                            timestampArray[i].style.visibility = "hidden";
                            timestampArray[i].value = null;
                        }

                        remainingIntervalArray[0].style.visibility = "hidden";
                        remainingIntervalArray[0].value = null;



                        this.innerHTML = "Add subscription overrides";
                        this.style.backgroundColor = "green";
                    }
                };

            }
        }

        function showSubscriptionProducts(subscription, subscriptionProducts, overrideProductsButtonsArray, productQuantityOverridesArray, productPriceOverridesArray, divIndex)
        {
            var divPanel = document.createElement("div");
            divPanel.className = "panel panel-primary col-xs-12";

            var h3PanelHeader = document.createElement("h3");
            h3PanelHeader.innerHTML = "Subscription Products";
            h3PanelHeader.className  = "panel-title panel-heading";

            var panelBody = document.createElement("div");
            panelBody.className = "panel-body";
            panelBody.id = "productPanelBody" + divIndex;
            //panelBody.appendChild(document.createTextNode("oswijfoiswejfoseijf"));


            divPanel.appendChild(h3PanelHeader);
            divPanel.appendChild(panelBody);
            $("#subscriptionComponentDiv"+divIndex).append(divPanel);

            for (var i = 0; i < subscriptionProducts.length; i++)
            {
                nameAndOverrideButtonDiv = showSubscriptionProductName(subscriptionProducts[i].PlanProduct, divIndex);
                if (subscription.Status != "Cancelled")
                {
                    createOverrideButton(overrideProductsButtonsArray, i, divIndex, nameAndOverrideButtonDiv);
                }
                showSubscriptionProductQuantityAndOverride(subscriptionProducts[i].PlanProduct, productQuantityOverridesArray, i, divIndex);
                showSubscriptionProductPriceAndOverride(subscriptionProducts[i], productPriceOverridesArray, i, divIndex);

                if (subscription.Status != "Cancelled")
                {
                //we set the onclick event to the override button here instead of in  createOverrideButton(...) because the inputs are now created
                setOverrideButton(overrideProductsButtonsArray, productQuantityOverridesArray, productPriceOverridesArray, i);
                } 
            }
        }

        //the latter two methods command the inputs for this subscription product
        function showSubscriptionProductName(subscriptionPlanProduct, divIndex, productQuantityOverridesArray)
        {
            var div = document.createElement("div");
            div.className = "row";

            var paragraph = document.createElement("p");
            paragraph.innerHTML =
                "<strong>" + subscriptionPlanProduct.ProductName + "</strong>";
            paragraph.style.textAlign = "right";
            paragraph.className = "col-md-7";

            div.appendChild(paragraph);

            $("#productPanelBody"+divIndex).append(div);

            return div;
        }

        function createOverrideButton(overrideProductsButtonsArray, i, divIndex, nameAndOverrideButtonDiv)
        {
            var overrideButton = document.createElement("button");
            overrideButton.innerHTML = "Add product overrides";
            overrideButton.className = "btn btn-success";
            overrideButton.style.float = "right";
            overrideButton.style.display = "inline";

            overrideProductsButtonsArray[i] = overrideButton;

            nameAndOverrideButtonDiv.appendChild(overrideButton);
        }

        function showSubscriptionProductQuantityAndOverride(subscriptionPlanProduct, productQuantityOverridesArray, index, divIndex)
        {
            var div = document.createElement("div");
            div.className = "row";

            var paragraph = document.createElement("p");
            paragraph.innerHTML = "<strong>Quantity: </strong>"  + subscriptionPlanProduct.Quantity;
            paragraph.style.textAlign = "right";
            paragraph.style.display = "inline";
            paragraph.style.marginLeft = "15em";
            paragraph.style.marginRight = "3em";

            var input = document.createElement("input");
            input.placeholder = "Add Quantity Override";
            input.style.paddingLeft = "1em";
            input.style.visibility = "hidden";

            div.appendChild(paragraph);
            div.appendChild(input);
            div.appendChild(document.createElement("br"));


            $("#productPanelBody"+divIndex).append(div);

            productQuantityOverridesArray[index] = input;
        }

        function showSubscriptionProductPriceAndOverride(subscriptionProduct, productPriceOverridesArray, index, divIndex)
        {
            var div = document.createElement("div");
            div.className = "row";

            var paragraph = document.createElement("p");
            paragraph.innerHTML = "<strong>Price:</strong> $"  + subscriptionProduct.Amount;
            paragraph.style.textAlign = "right";
            paragraph.style.marginLeft = "16.5em";
            paragraph.style.marginRight = "1.5em";
            paragraph.style.display = "inline";

            var input = document.createElement("input");
            input.placeholder = "Add Price Override";
            input.style.paddingLeft = "1em";
            input.style.visibility = "hidden";


            div.appendChild(paragraph);
            div.appendChild(input);

            div.appendChild(document.createElement("br"));
            div.appendChild(document.createElement("br"));


            $("#productPanelBody"+divIndex).append(div);
            productPriceOverridesArray[index] = input;
        }

        function setOverrideButton(overrideProductsButtonsArray, productQuantityOverridesArray, productPriceOverridesArray, i)
        {
            overrideProductsButtonsArray[i].onclick = function() {
                if (this.innerHTML == "Add product overrides")
                {
                    productQuantityOverridesArray[i].style.visibility = "visible";
                    productPriceOverridesArray[i].style.visibility = "visible";
                    this.innerHTML = "Remove product overrides";
                    this.style.backgroundColor = "red";
                }
                else
                {
                    productQuantityOverridesArray[i].value = null;
                    productQuantityOverridesArray[i].style.visibility = "hidden";
                    productPriceOverridesArray[i].value = null;
                    productPriceOverridesArray[i].style.visibility = "hidden";
                    this.innerHTML = "Add product overrides";
                    this.style.backgroundColor = "green";
                }


            }
        }


        function showSubscriptionOverrides(subscriptionOverridesArray, divIndex)
        {
            var divPanel = document.createElement("div");
            divPanel.className = "panel panel-primary col-xs-12 col-md-6";

            var h3PanelHeader = document.createElement("h3");
            h3PanelHeader.innerHTML = "Subscription Overrides and Setup";
            h3PanelHeader.className  = "panel-title panel-heading";

            var panelBody = document.createElement("div");
            panelBody.className = "panel-body";
            panelBody.id = "overridePanelBody" + divIndex;
            //panelBody.appendChild(document.createTextNode("oswijfoiswejfoseijf"));


            divPanel.appendChild(h3PanelHeader);
            divPanel.appendChild(panelBody);
            $("#subscriptionComponentDiv"+divIndex).append(divPanel);


            /* Overrides for subscription name, description, charge amount, and setup amount */
            var label = document.createElement("p");
            label.innerHTML = "Override Name"  + "<br />";
            $("#subscriptionComponentDiv"+divIndex).append(label);
            $("#overridePanelBody"+divIndex).append(label);


            if (subscription.Status != "Cancelled")
            {
                var input = document.createElement("input");
                //input.id = "nameOverride_" + returnedData[i].Id;
                $("#subscriptionComponentDiv"+divIndex).append(input);
                subscriptionOverridesArray[0] = input;
                $("#overridePanelBody"+divIndex).append(input);
            }
     


            var label = document.createElement("p");
            label.innerHTML = "Override Description" + "<br />";
            $("#subscriptionComponentDiv"+divIndex).append(label);
            var input = document.createElement("input");
            $("#overridePanelBody"+divIndex).append(label);

            if (subscription.Status != "Cancelled")
            {
                //input.id = "descriptionOverride_" + returnedData[i].Id;
                $("#subscriptionComponentDiv"+divIndex).append(input);
                subscriptionOverridesArray[1] = input;

                $("#overridePanelBody"+divIndex).append(input);
            }

            //var label = document.createElement("p");
            //label.innerHTML = "Override Charge" + "<br />";
            //$("#subscriptionComponentDiv"+divIndex).append(label);
            //var input = document.createElement("input");
            ////input.id = "chargeOverride_" + returnedData[i].Id;
            //$("#subscriptionComponentDiv"+divIndex).append(input);
            //subscriptionOverridesArray[2] = input;

            //$("#overridePanelBody"+divIndex).append(label);
            //$("#overridePanelBody"+divIndex).append(input);


            //var label = document.createElement("p");
            //label.innerHTML = "Override Setup" + "<br />";
            //$("#subscriptionComponentDiv"+divIndex).append(label);
            //var input = document.createElement("input");
            ////input.id = "setupOverride_" + returnedData[i].Id;
            //$("#subscriptionComponentDiv"+divIndex).append(input);
            //subscriptionOverridesArray[3] = input;

            //$("#overridePanelBody"+divIndex).append(label);
            //$("#overridePanelBody"+divIndex).append(input);

        }

        function showReference(reference, divIndex)
        {
            var label = document.createElement("p");
            label.innerHTML = " Reference" + "<br />";
            $("#subscriptionComponentDiv"+divIndex).append(label);
            var input = document.createElement("input");
            //input.id = "reference_" + returnedData[i].Id;
            $("#subscriptionComponentDiv"+divIndex).append(input);
            reference = input;

            $("#overridePanelBody"+divIndex).append(label);
            $("#overridePanelBody"+divIndex).append(input);
        }

        function showTimestamps(timestampsArray, divIndex)
        {
            var label = document.createElement("p");
            label.innerHTML = " Contract Start Date" + "<br />";
            $("#subscriptionComponentDiv"+divIndex).append(label);
            var inputStart = document.createElement("input");
            inputStart.id = "usingDatepickerStart" + divIndex;

            $("#subscriptionComponentDiv"+divIndex).append(inputStart);
            timestampsArray[0] = inputStart;

            $("#overridePanelBody"+divIndex).append(label);
            $("#overridePanelBody"+divIndex).append(inputStart);

            var label = document.createElement("p");


            label.innerHTML = " Contract End Date" + "<br />";
            $("#subscriptionComponentDiv"+divIndex).append(label);
            var inputEnd = document.createElement("input");
            inputEnd.id = "usingDatepickerEnd" + divIndex;

            $("#subscriptionComponentDiv"+divIndex).append(inputEnd);
            timestampsArray[1] = inputEnd;

            $("#overridePanelBody"+divIndex).append(label);
            $("#overridePanelBody"+divIndex).append(inputEnd);



            var label = document.createElement("p");
            label.innerHTML = "Scheduled Activation Timestamp" + "<br />";
            $("#subscriptionComponentDiv"+divIndex).append(label);
            var inputScheduled = document.createElement("input");
            inputScheduled.id = "usingDatepickerScheduled" + divIndex;

            $("#subscriptionComponentDiv"+divIndex).append(inputScheduled);
            timestampsArray[2] = inputScheduled;

            $("#overridePanelBody"+divIndex).append(label);
            $("#overridePanelBody"+divIndex).append(inputScheduled);

            //setting max and min dates
            $("#usingDatepickerStart"+ divIndex).datepicker({
                minDate : 0,
                onClose: function( selectedDate ) {
                    $( "#usingDatepickerEnd" + divIndex).datepicker( "option", "minDate", selectedDate );
                    $( "#usingDatepickerScheduled" + divIndex).datepicker( "option", "minDate", selectedDate );
                }
            });


            $("#usingDatepickerEnd"+ divIndex).datepicker({
                onClose: function( selectedDate ) {
                    $( "#usingDatepickerStart" + divIndex).datepicker( "option", "maxDate", selectedDate );
                    $( "#usingDatepickerScheduled" + divIndex).datepicker( "option", "maxDate", selectedDate );

                }
            });


            $("#usingDatepickerScheduled" + divIndex).datepicker({
                onClose: function( selectedDate ) {
                    $( "#usingDatepickerStart" + divIndex).datepicker( "option", "maxDate", selectedDate );
                    $( "#usingDatepickerEnd" + divIndex).datepicker( "option", "minDate", selectedDate );
                }
            });
        }

        function showRemainingInterval(remainingInterval, divIndex)
        {
            var label = document.createElement("p");
            label.innerHTML = "Remaining Interval" + "<br />";
            $("#subscriptionComponentDiv"+divIndex).append(label);
            var input = document.createElement("input");
            //RemainingInterval.id = "remainingInterval_" + returnedData[i].Id;
            $("#subscriptionComponentDiv"+divIndex).append(input);
            remainingInterval = input;

            $("#overridePanelBody"+divIndex).append(label);
            $("#overridePanelBody"+divIndex).append(input);
        }

        function showButtons(subscription,activateArray, provisionArray, buttonsArray, subscriptionID, divIndex)
        {
            if (subscription.Status != "Cancelled")     
            { 

                var divPanel = document.createElement("div");
                divPanel.className = "panel panel-primary col-xs-12";

                var h3PanelHeader = document.createElement("h3");
                h3PanelHeader.innerHTML = "Subscription Actions";
                h3PanelHeader.className  = "panel-title panel-heading";

                var panelBody = document.createElement("div");
                panelBody.className = "panel-body";
                panelBody.id = "actionPanelBody" + divIndex;
                //panelBody.appendChild(document.createTextNode("oswijfoiswejfoseijf"));


                divPanel.appendChild(h3PanelHeader);
                divPanel.appendChild(panelBody);
                $("#subscriptionComponentDiv"+divIndex).append(divPanel);
            }


            //Buttons: update, cancel, delete, provision, and activate
            if(subscription.Status == "Active")
            {
                buttonsArray[0] = createButton(subscription, "Update", subscriptionID, onUpdateButton, 0, divIndex, "col-md-2 btn btn-info");
                buttonsArray[3] = createButton(subscription, "Cancel", subscriptionID, onCancelButton,3,divIndex, "col-md-2 btn btn-default");
            }
            else if(subscription.Status == "Provisioning")
            {
                buttonsArray[0] = createButton(subscription, "Update", subscriptionID, onUpdateButton, 0, divIndex, "col-md-2 btn btn-info");
                buttonsArray[1] = createActivateOrProvisionButton(subscription, "Activate", activateArray, provisionArray, subscriptionID, onActivateButton, 1,divIndex, "col-md-2", "btn btn-success col-md-12");
                buttonsArray[3] = createButton(subscription, "Cancel", subscriptionID, onCancelButton,3,divIndex, "col-md-2 btn btn-default");
            }
            else if (subscription.Status == "Draft")
            {
                buttonsArray[0] = createButton(subscription, "Update", subscriptionID, onUpdateButton, 0, divIndex, "col-md-2 btn btn-info");
                buttonsArray[1] = createActivateOrProvisionButton(subscription, "Activate", activateArray, provisionArray, subscriptionID, onActivateButton, 1,divIndex, "col-md-2","btn btn-success col-md-12");
                buttonsArray[2] = createActivateOrProvisionButton(subscription, "Provision", activateArray, provisionArray, subscriptionID, onProvisionButton, 2,divIndex, "col-md-2", "btn btn-warning col-md-12");
                buttonsArray[4] = createButton(subscription, "Delete", subscriptionID, onDeleteButton,4,divIndex, "col-md-2 btn btn-danger");
            }
        }

        //=================== EVENT FUNCTIONS ======================//

        function onDeleteButton(subID)
        {
            alert("The delete button has been pressed. Id is " + subID);
            postAjax(subID, "Subscriptions/DeleteSubscription");
        }

        function onProvisionButton(subID, subscriptionProvisionInput)
        {
            alert("The provision button has been pressed. Id is " + subID);
            postProvisionOrActivateAjax(subID, subscriptionProvisionInput, "Subscriptions/ProvisionSubscription");
        }

        function onActivateButton(subID, subscriptionActivateInput)
        {
            alert("The activation button has been pressed. Id is " + subID);
            postProvisionOrActivateAjax(subID, subscriptionActivateInput, "Subscriptions/ActivateSubscription");
        }

        function onCancelButton(subID)
        {
            alert("The cancel button has been pressed. Id is " + subID);
            postAjax(subID, "Subscriptions/CancelSubscription");
        }

        function onUpdateButton(subID)
        {
            //locate the subscription array that we use in the global "subscriptionsArray"
            var subscriptionToUpdate = subscriptionsArray[subID.toString()];

            //these array stores the int values of each product's quantity and price overrides, and subscription overrides, and will be passed to the controller
            var productQuantityOverridesValues = new Array();
            var productPriceOverridesValues = new Array();

            //place each input's value from the productQuantityOverrides and productPriceOverrides array into the two arrays instantiated above
            for (var i = 0; i < subscriptionToUpdate["productQuantityOverrides"].length; i++)
            {
                productQuantityOverridesValues[i] = subscriptionToUpdate["productQuantityOverrides"][i].value;
                productPriceOverridesValues[i] = subscriptionToUpdate["productPriceOverrides"][i].value;
            }

            //place each input's value from subscriptionOverrides to subscriptionOverridesValue
            var subscriptionOverridesValues = new Array();
            for (var i = 0; i < subscriptionToUpdate["subscriptionOverrides"].length; i++)
            {
                subscriptionOverridesValues[i] = subscriptionToUpdate["subscriptionOverrides"][i].value;
            }

            //place each input's value from timestamps to timestampsValues
            var timestampsValues = new Array();

            for (var i = 0; i < subscriptionToUpdate["timestamps"].length; i++)
            {
                timestampsValues[i] = subscriptionToUpdate["timestamps"][i].value;
            }


            var postSubscription = {
                SubscriptionID : subID,
                ProductQuantityOverrides : productQuantityOverridesValues,
                ProductPriceOverrides : productPriceOverridesValues,
                NameOverride: subscriptionOverridesValues[0],
                DescriptionOverride: subscriptionOverridesValues[1],
                //ChargeOverride: subscriptionOverridesValues[2],
                //SetupOverride : subscriptionOverridesValues[3],
                ContractStartTimestamp:  timestampsValues[0],
                ContractEndTimestamp: timestampsValues[1],
                ScheduledActivationTimestamp : timestampsValues[2],
                Reference : subscriptionToUpdate["reference"][0].value,
                RemainingInterval : subscriptionToUpdate["remainingInterval"][0].value
            };

            alert("onUpdateButton has been called");


            $.ajax( {
                // contentType: 'application/json; charset=utf-8',
                dataType : 'json',
                type: "POST",
                traditional: true,
                url: "Subscriptions/UpdateSubscription",
                data: postSubscription,
                success: function() {
                    $("#"+cusID).trigger("click");
                    alert("The update button has successfully posted data to the server!!! WHOOO!!"); }
            });
        }

        //=================== HELPER FUNCTIONS =====================//

        //Buttons: update, cancel, delete, provision, and activate


        function createActivateOrProvisionButton(subscription, innerHtml, activateArray, provisionArray, subscriptionId, clickFunction, index, divIndex, classSizeNames, classButtonNames)
        {
            if (innerHtml == "Activate")
            {
                var div = document.createElement("div");
                div.className = classSizeNames ;
                div.style.backgroundColor = "green";
                div.style.marginLeft = "1em";
                div.style.borderRadius = "5px";
                div.style.paddingBottom = "0.5em";
                $("#actionPanelBody"+divIndex).append(div);

                var button = document.createElement("button");
                button.innerHTML = innerHtml;
                button.className = classButtonNames;
                button.id = subscriptionId + "_" + index;
                div.appendChild(button);


                div.appendChild(document.createElement("br"));
                div.appendChild(document.createElement("br"));
                var day = document.createElement("input");
                day.placeholder = "Activation Day";
                day.className = "col-md-12";
                div.appendChild(day);
                activateArray[0] = day;

                div.appendChild(document.createElement("br"));
                var month = document.createElement("input");
                month.placeholder = "Activation Month";
                month.className = "col-md-12";
                div.appendChild(month);
                activateArray[1] = month;

                $("#"+button.id).on("click", function() {
                    alert("The button was clicked");

                    clickFunction(subscriptionId, activateArray);
                });
            }

            if (innerHtml == "Provision" && subscription.ScheduledActivationTimestamp != null)
            {
                //next two blocks are identical to the first two blocks in "Activation"
                var div = document.createElement("div");
                div.className = classSizeNames ;
                div.style.backgroundColor = "#E9BC36";
                div.style.marginLeft = "1em";
                div.style.borderRadius = "5px";
                div.style.paddingBottom = "0.5em";
                $("#actionPanelBody"+divIndex).append(div);

                var button = document.createElement("button");
                button.innerHTML = innerHtml;
                button.className = classButtonNames;
                button.id = subscriptionId + "_" + index;
                div.appendChild(button);

                div.appendChild(document.createElement("br"));
                div.appendChild(document.createElement("br"));
                var day = document.createElement("input");
                day.placeholder = "Provision date";
                day.className = "col-md-12";
                div.appendChild(day);
                provisionArray[0] = day;

                div.appendChild(document.createElement("br"));
                var month = document.createElement("input");
                month.placeholder = "Provision month";
                month.className = "col-md-12";
                div.appendChild(month);
                provisionArray[1] = month;

                $("#"+button.id).on("click", function() {
                    alert("The button was clicked");

                    clickFunction(subscriptionId, provisionArray);
                });
            }




            return button;
        }

        function createButton(subscription, innerHtml, subscriptionId, clickFunction, index, divIndex, classNames)
        {
            var button = document.createElement("button");
            button.innerHTML = innerHtml;
            button.className = classNames;
            button.id = subscriptionId + "_" + index;
            if (button.innerHTML == "Cancel" || button.innerHTML == "Delete")
            {
                button.style.float = "right";
            }
            $("#actionPanelBody"+divIndex).append(button)
            

            $("#"+button.id).on("click", function() {
                alert("The button was clicked");

                clickFunction(subscriptionId);
            });


            return button;
        }

        function postAjax(subID, controllerUrl)
        {
            var subscription = { SubscriptionID: subID };

            $.ajax({
                type: "POST",
                url: controllerUrl,
                dataType: "json",
                data: subscription,
                sucess: function() {
                    $("#"+cusID).trigger("click");
                }
            });
        }

        function postProvisionOrActivateAjax(subID, subscriptionInputs, controllerUrl)
        {
            alert("called postProvisionOrActivateAjax function");
            //make a list that conbtains the input values, and pass it to the controller
            var subscriptionInputsValues = new Array(subscriptionInputs.length);
            for (var i = 0; i < activateInputCount; i++)
            {
                subscriptionInputsValues[i] = subscriptionInputs[i].value;
            }

            var subscription = { SubscriptionID: subID,
                InputValuesForActivationAndProvision : subscriptionInputsValues };

            $.ajax({
                type: "POST",
                url: controllerUrl,
                dataType: "json",
                data: subscription,
                traditional: true,
                success: function(){
                     $("#"+cusID).trigger("click");
                }
            });
        }

    </script>

</body>
</html>

