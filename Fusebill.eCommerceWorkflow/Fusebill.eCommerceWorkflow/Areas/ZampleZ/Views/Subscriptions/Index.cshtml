@using Fusebill.ApiWrapper


@model Fusebill.eCommerceWorkflow.Areas.ZampleZ.Models.CustomersAndSubscriptionsVM


<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>Index</title>

    @*To make dropdown*@
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.3/jquery.min.js"></script>
    <script src="http://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/js/bootstrap.min.js"></script>

    @*To make datepicker*@
    <script src="~/Scripts/jquery-1.8.2.min.js"></script>
    <script src="~/Scripts/jquery-ui-1.8.24.min.js"></script>

    <link href="~/Scripts/jquery-ui.structure.min.css" rel="stylesheet" />
    <link href="~/Scripts/jquery-ui.theme.min.css" rel="stylesheet" />

    <script src="~/Scripts/bootstrap.min.js"></script>
    <link href="~/Content/bootstrap.css" rel="stylesheet" />

    @*Datetime conversion*@
    <script src="~/Scripts/moment.js"></script>
    <script>
        $(document).ready(function() {
            $("#datepicker").datepicker();
        });
    </script>

</head>
<body>


    @Html.Partial("~/Areas/ZampleZ/Views/Shared/Layout.cshtml");
    <div>
        <h2 style="text-align:center; font-family:cursive;">Modifying Subscriptions</h2>
        <br /><br />
    </div>

    <div>
        @foreach (var customer in Model.AvailableCustomers)
        {
            <div id="@customer.Id" class="panel panel-primary panel-primary-hover col-xs-12 col-md-4" onclick="loadSubscriptions(@customer.Id, '@customer.FirstName', '@customer.LastName')">
                <h3 class="panel-title panel-heading">Demo Customer</h3>
                <div class="panel-body">

                    <table class="table table-condensed ">
                        <tbody>
                            <tr>
                                <td><strong>First name : </strong></td>
                                <td>@customer.FirstName</td>
                            </tr>
                            <tr>
                                <td><strong>Last name : </strong></td>
                                <td>@customer.LastName</td>
                            </tr>
                            <tr>
                                <td><strong>Company name: </strong></td>
                                <td>@customer.CompanyName</td>
                            </tr>
                            <tr>
                                @foreach (var plan in Model.AvailablePlans)
                                {
                                    <td>
                                        <button type="button" class="col-md-12 btn btn-warning" onclick="addSubscription(@customer.Id, @plan.PlanFrequencies[0].Id)">
                                            @if (plan.PlanFrequencies[0].Id == 10802244)
                                            { <p style="font-weight:bold">Add Bronze Plan</p> }
                                            else if (plan.PlanFrequencies[0].Id == 10832272)
                                            { <p style="font-weight:bold">Add Gold Plan</p> }
                                        </button>
                                    </td>
                                }
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>
        }
    </div>


    <div>&nbsp;</div>
    <div>&nbsp;</div>
    <div id="loadingDiv" style="text-align:center"><img src="~/Content/pacman-loader.gif" /></div>

    <div id="divItems">

    </div>

    <script>

        $(function() {
            $( "#datepicker" ).datepicker();
        });

        //shows div animation when ajax is getting a customer's subscriptions
        var $loading = $("#loadingDiv").hide();

        $(document)
            .ajaxStart(function () {
                $loading.show();
            })
            .ajaxStop(function() {
                $loading.hide();
            });


        //a super array that stores the arrays storing subscriptions
        var subscriptionsArray = new Array();

        //number of timestamps, subscriptionOverrides, buttons, etc. that exist
        var timestampCount = 3;
        var subscriptionOverrideCount = 2;
        var buttonCount = 5;
        var activateInputCount = 2;
        var provisionInputCount = 2;

        //the ID of the customer whose subscriptions we are viewing. Used later to clear these subscriptions from the screen
        var cusID;



        //adds a new subscription to the selected customer
        function addSubscription(customerID, planFrequencyID)
        {
            var subscription = { CustomerID: customerID ,
                PlanFrequencyID: planFrequencyID };

            $.ajax({
                type: "POST",
                url: "Subscriptions/CreateSubscription",
                dataType: "json",
                data: subscription,
                success: function () {
                    var div = document.getElementById("divItems");

                    //remove previous customers' subscriptions and click on the customer whom we added a new plan for
                    while (div.firstChild) {
                        div.removeChild(div.firstChild);
                    }
                    $("#"+cusID).trigger("click");
                },
            });
        }

        //posts to server the id of the customer selected. Returns a list of the selected customer's subscriptions
        function loadSubscriptions(id, firstName, lastName)
        {
            cusID = id;
            var customer = { CustomerID: id};

            $.ajax({
                type: "POST",
                url: "Subscriptions/ListSubscriptionsForCustomer",
                dataType: "json",
                data: customer,
                success: function (data) {
                    var div = document.getElementById("divItems");

                    //remove the previous customer's subscriptions from the screen
                    while (div.firstChild) {
                        div.removeChild(div.firstChild);
                    }
                    returnedData = data;
                    showAllSubscriptions(returnedData, firstName, lastName);
                },
            });
        }

        //creates a toggle button for each subscription and calls showSubscription(...) for each subscription
        function showAllSubscriptions(returnedData, customerFirstName, customerLastName){

            //#region creates a title with text "Subscription for [customer name]"
            var h2 = document.createElement("h2");
            h2.className = "jumbotron";
            h2.style.textAlign = "center";
            h2.innerHTML = "Subscriptions for " + customerFirstName + " " + customerLastName;
            $("#divItems").append(h2);
            //#endregion

            //create toggle-button for each subscription and calls showSubscription(...) to show data about each subscription
            for (var i = 0; i < returnedData.length; i++)
            {
                //#region creating toggle button
                var subscriptionDiv = document.createElement("div");
                subscriptionDiv.id = "subscriptionDiv" + i;
                subscriptionDiv.setAttribute("class", "btn col-md-10 col-md-offset-1");
                $("#divItems").append(subscriptionDiv);

                var button = document.createElement("button");
                button.setAttribute("data-toggle", "collapse");
                button.setAttribute("data-target", "#subscriptionComponentDiv"+i);
                button.setAttribute("class", "btn col-md-10 col-md-offset-1");
                button.id = "button"+i;
                $("#subscriptionDiv"+i).append(button);

                var subscriptionComponentDiv = document.createElement("p");
                subscriptionComponentDiv.id = "subscriptionComponentDiv" + i;
                subscriptionComponentDiv.setAttribute("class", "collapse col-md-10 col-md-offset-1");
                $("#subscriptionDiv"+i).append(subscriptionComponentDiv);
                //#endregion

                showSubscription(returnedData[i], returnedData[i].Id, i);
            }
        }

        //shows data relevant for each subscription
        function showSubscription(subscription, subscriptionID, divIndex)  //index is for the subscriptionDiv + i id
        {
            //this array will hold all information (texts, inputs, buttons) related to a subscription.
            var subscriptionArray = new Array();

            subscriptionArray["productQuantityOverrides"] = new Array(subscription.SubscriptionProducts.length);
            subscriptionArray["productPriceOverrides"] = new Array(subscription.SubscriptionProducts.length);
            subscriptionArray["overrideButtons"] = new Array (subscription.SubscriptionProducts.length);
            subscriptionArray["subscriptionOverrides"] = new Array(subscriptionOverrideCount);
            subscriptionArray["reference"] = document.createElement("input");
            subscriptionArray["timestamps"] = new Array();
            subscriptionArray["remainingInterval"] = document.createElement("input");
            subscriptionArray["buttons"] = new Array(buttonCount);
            subscriptionArray["activateInputs"] = new Array(activateInputCount);
            subscriptionArray["provisionInputs"] = new Array(provisionInputCount);

            showSubscriptionInformation(subscription, subscriptionArray["subscriptionOverrides"], subscriptionArray["reference"], subscriptionArray["timestamps"], subscriptionArray["remainingInterval"], divIndex);

            showSubscriptionProducts(subscription, subscription.SubscriptionProducts, subscriptionArray["overrideButtons"], subscriptionArray["productQuantityOverrides"], subscriptionArray["productPriceOverrides"], divIndex);

            showSubscriptionActionButtons(subscription, subscriptionArray["buttons"], subscriptionArray["activateInputs"], subscriptionArray["provisionInputs"], subscriptionID, divIndex);

            subscriptionsArray[subscriptionID.toString()] = subscriptionArray;
        }

        //displays subscription's name, description, timestamps, remaining interval, and override button
        function showSubscriptionInformation(subscription, subscriptionOverridesArray, referenceArray, timestampArray, remainingIntervalArray, divIndex)
        {
            //#region create title for subscription
            //each subscription button has two rows.
            //The top row has titles: "Plan Name", "Status", and "Amount"
            //the bottom row has the fields that correspond to the titles
            var divRowTitle = document.createElement("div");
            divRowTitle.className = "row";


            var titlePlanName = document.createElement("p");
            titlePlanName.className = "col-md-2 text-center";
            titlePlanName.innerHTML = "Plan Name ";
            divRowTitle.appendChild(titlePlanName);

            var titleStatus = document.createElement("p");
            titleStatus.className = "col-md-2 col-md-offset-3 text-center" ;
            titleStatus.innerHTML = "Status";
            divRowTitle.appendChild(titleStatus);

            var titleAmount = document.createElement("p");
            titleAmount.className = "col-md-2 col-md-offset-3 text-center";
            titleAmount.innerHTML = "Amount";
            divRowTitle.appendChild(titleAmount);



            var divRowSpecific = document.createElement("div");
            divRowSpecific.className = "row";

            var specificPlanName = document.createElement("p");
            specificPlanName.className = "col-md-2 text-center";
            specificPlanName.innerHTML = subscription.PlanName;
            divRowSpecific.appendChild(specificPlanName);

            var specificStatus = document.createElement("p");
            specificStatus.className = "col-md-2 col-md-offset-3 text-center";
            specificStatus.innerHTML = subscription.Status;
            divRowSpecific.appendChild(specificStatus);

            var specificAmount = document.createElement("p");
            specificAmount.className = "col-md-2 col-md-offset-3 text-center";
            specificAmount.innerHTML = subscription.Amount
            divRowSpecific.appendChild(specificAmount);

            divRowTitle.appendChild(divRowSpecific);
            $("#button"+divIndex).append(divRowTitle);

            //#endregion

            //set the colour of the subscription's toggle button depending on its status
            switch (subscription.Status)
            {
                case "Active":
                    $("#button"+divIndex).addClass("btn-success");
                    break;
                case "Cancelled":
                    $("#button"+divIndex).addClass("btn-cancelled-Fusebill");
                    break;
                case "Draft":
                    $("#button"+divIndex).addClass("btn-draft-Fusebill");
                    break;
                case "Provisioning":
                    $("#button"+divIndex).addClass("btn-warning");
                    break;
                default:
                    alert("This subscription's status does not match defined statuses");
            }

            //#region create panel to hold subscription information
            var divPanel = document.createElement("div");
            divPanel.className = "panel panel-primary col-xs-12 col-md-12";

            var h3PanelHeader = document.createElement("h3");
            h3PanelHeader.innerHTML = "Subscription Information";
            h3PanelHeader.className  = "panel-title panel-heading";

            var panelBody = document.createElement("div");
            panelBody.className = "panel-body";
            panelBody.id = "informationPanelBody" + divIndex;


            divPanel.appendChild(h3PanelHeader);
            divPanel.appendChild(panelBody);
            $("#subscriptionComponentDiv"+divIndex).append(divPanel);
            //#endregion

            //#region display Subscription Information and inputs 

            //overrides do not exist for cancelled subscriptions
            if (subscription.Status != "Cancelled")
            {
                var subscriptionOverrideButton = document.createElement("button");
                subscriptionOverrideButton.innerHTML = "Add subscription overrides";

                subscriptionOverrideButton.className = "btn btn-success";
                subscriptionOverrideButton.setAttribute('style','float:right; display:inline;');
                $("#informationPanelBody"+divIndex).append(subscriptionOverrideButton);
            }

            createParagraphWithSpecialMargin("<strong>Subscription Name</strong>", subscription.Status, "15em", divIndex);
            createParagraphWithSpecialMarginAndLineheight(subscription.PlanName, subscription.Status, "15em","0em",divIndex);
      

            if ( !(subscription.SubscriptionOverride === null) && !(subscription.SubscriptionOverride.Name === null))
            {
                    createStandardParagraph("<strong>Subscription Name Override</strong>", divIndex);
                    createParagraphWithLineheight(subscription.SubscriptionOverride.Name + "<br />","0em",divIndex);
            }

            createStandardInput("Add Name Override","hidden",subscriptionOverridesArray, 0, divIndex, subscription.Status);

            $("#informationPanelBody"+divIndex).append(document.createElement("br"));
            createStandardParagraph("<strong>Subscription Description</strong>",divIndex);
            createParagraphWithLineheight(subscription.PlanDescription,"0em",divIndex);


            if (  !(subscription.SubscriptionOverride === null) && !(subscription.SubscriptionOverride.Description === null))
            {
                    createStandardParagraph("<strong>Subscription Description Override</strong>", divIndex);
                    createParagraphWithLineheight(subscription.SubscriptionOverride.Description + "<br />","0em",divIndex);
            }

            createStandardInput("Add Description Override","hidden",subscriptionOverridesArray, 1, divIndex, subscription.Status);



            var subscriptionReference = ((subscription.PlanReference == null) ? "Not yet set" : subscription.PlanReference);
            $("#informationPanelBody"+divIndex).append(document.createElement("br"));
            createStandardParagraph("<strong>Subscription Reference</strong>",divIndex);
            createParagraphWithLineheight(subscriptionReference + "<br />", "0em", divIndex);
            createStandardInput("Add Reference Override", "hidden", referenceArray, 0, divIndex, subscription.Status);




            $("#informationPanelBody"+divIndex).append(document.createElement("br"));
            createStandardParagraph("<strong>Subscription Creation Date</strong>",divIndex);
            var date = new Date(parseFloat(subscription.Created.replace("/Date(", "").replace(")/",""), 10));
            createParagraphWithLineheight("br />" + date, "0em", divIndex);



            $("#informationPanelBody"+divIndex).append(document.createElement("br"));
            createStandardParagraph("<strong>Subscription Start Date</strong>",divIndex);
            var date = ((subscription.ContractStartTimestamp == null) ? "Not yet set" : new Date(parseFloat(subscription.ContractStartTimestamp.replace("/Date(", "").replace(")/",""), 10)));
            createParagraphWithLineheight(date,"0em",divIndex);
            createDatepickerInput("Edit Start Date", "hidden", timestampArray, 0, "usingDatepickerStart" + divIndex, divIndex, subscription.Status);


            $("#informationPanelBody"+divIndex).append(document.createElement("br"));
            createStandardParagraph("<strong>Subscription End Date</strong>",divIndex);
            var date = ((subscription.ContractEndTimestamp == null) ? "Not yet set" : new Date(parseInt(subscription.ContractEndTimestamp.replace("/Date(", "").replace(")/",""), 10)));
            createParagraphWithLineheight(date,"0em",divIndex);
           createDatepickerInput("Edit End Date", "hidden", timestampArray, 1, "usingDatepickerEnd" + divIndex, divIndex, subscription.Status);


            if (subscription.Status != "Active" && subscription.Status != "Cancelled")
            {
                $("#informationPanelBody"+divIndex).append(document.createElement("br"));
                createStandardParagraph("<strong>Subscription Scheduled Activation Date</strong>",divIndex)
                var date = ((subscription.ScheduledActivationTimestamp == null)  ? "Not yet set" : date =  new Date(parseFloat(subscription.ScheduledActivationTimestamp.replace("/Date(", "").replace(")/",""), 10)));
                createParagraphWithLineheight(date,"0em",divIndex);
                createDatepickerInput("Edit Activation Date", "hidden", timestampArray, 2, "usingDatepickerScheduled" + divIndex, divIndex);
            }



            createStandardParagraph("<strong>Subscription Remaining Interval</strong>",divIndex);
            var remaining = ((subscription.RemainingInterval === null) ?  "No remaining interval set" :  subscription.RemainingInterval);
            createParagraphWithLineheight(remaining,"0em",divIndex);
            createStandardInput("Edit Remaining Interval", "hidden", remainingIntervalArray, 0, divIndex, subscription.Status);


            $("#usingDatepickerStart"+ divIndex).datepicker({
                minDate : 0,
                onClose: function( selectedDate ) {
                    $( "#usingDatepickerEnd" + divIndex).datepicker( "option", "minDate", selectedDate );
                    $( "#usingDatepickerScheduled" + divIndex).datepicker( "option", "minDate", selectedDate );
                }
            });

            $("#usingDatepickerEnd"+ divIndex).datepicker({
                onClose: function( selectedDate ) {
                    $( "#usingDatepickerStart" + divIndex).datepicker( "option", "maxDate", selectedDate );
                    $( "#usingDatepickerScheduled" + divIndex).datepicker( "option", "maxDate", selectedDate );

                }
            });


            $("#usingDatepickerScheduled" + divIndex).datepicker({
                onClose: function( selectedDate ) {
                    $( "#usingDatepickerStart" + divIndex).datepicker( "option", "maxDate", selectedDate );
                    $( "#usingDatepickerEnd" + divIndex).datepicker( "option", "minDate", selectedDate );
                }
            });

            if (subscription.Status != "Cancelled")
            {
                subscriptionOverrideButton.onclick = function() {
                    if (this.innerHTML == "Add subscription overrides")
                    {
                        //if we add overrides, let all override inputs be visible
                        for (var i = 0; i < subscriptionOverridesArray.length; i++)
                        {
                            subscriptionOverridesArray[i].style.visibility = "visible";
                        }

                        referenceArray[0].style.visibility = "visible";

                        for (var i = 0; i < timestampArray.length; i++)
                        {
                            timestampArray[i].style.visibility = "visible";
                        }

                        remainingIntervalArray[0].style.visibility = "visible";

                        this.innerHTML = "Remove subscription overrides";
                        this.style.backgroundColor = "red";
                    }
                    else
                    {
                        for (var i = 0; i < subscriptionOverridesArray.length; i++)
                        {
                            subscriptionOverridesArray[i].style.visibility = "hidden";
                            subscriptionOverridesArray[i].value = null;
                        }

                        referenceArray[0].style.visibility = "hidden";
                        referenceArray[0].value = null;

                        for (var i = 0; i < timestampArray.length; i++)
                        {
                            timestampArray[i].style.visibility = "hidden";
                            timestampArray[i].value = null;
                        }

                        remainingIntervalArray[0].style.visibility = "hidden";
                        remainingIntervalArray[0].value = null;

                        this.innerHTML = "Add subscription overrides";
                        this.style.backgroundColor = "green";
                    }
                };

            }

            //#endregion
        }

        //creates panel to display the Subscription Products and sets data relevant to subscription products
        function showSubscriptionProducts(subscription, subscriptionProducts, overrideProductsButtonsArray, productQuantityOverridesArray, productPriceOverridesArray, divIndex)
        {
            //#region create Subscription Products panel
            var divPanel = document.createElement("div");
            divPanel.className = "panel panel-primary col-xs-12";

            var h3PanelHeader = document.createElement("h3");
            h3PanelHeader.innerHTML = "Subscription Products";
            h3PanelHeader.className  = "panel-title panel-heading";

            var panelBody = document.createElement("div");
            panelBody.className = "panel-body";
            panelBody.id = "productPanelBody" + divIndex;

            divPanel.appendChild(h3PanelHeader);
            divPanel.appendChild(panelBody);
            $("#subscriptionComponentDiv"+divIndex).append(divPanel);

            //#endregion

            for (var i = 0; i < subscriptionProducts.length; i++)
            {
                nameAndOverrideButtonDiv = showSubscriptionProductName(subscriptionProducts[i].PlanProduct, divIndex);
                if (subscription.Status != "Cancelled")
                {
                    createOverrideButton(overrideProductsButtonsArray, i, divIndex, nameAndOverrideButtonDiv);
                }

                showSubscriptionProductQuantityAndOverride(subscriptionProducts[i].PlanProduct, productQuantityOverridesArray, i, divIndex);
                showSubscriptionProductPriceAndOverride(subscriptionProducts[i], productPriceOverridesArray, i, divIndex);

                if (subscription.Status != "Cancelled")
                {
                    //we attach an onclick event to the override button here instead of in  createOverrideButton(...) because the inputs are now created
                    setOverrideButton(overrideProductsButtonsArray, productQuantityOverridesArray, productPriceOverridesArray, i);
                }
            }
        }

                //displays a subscription product's name
                function showSubscriptionProductName(subscriptionPlanProduct, divIndex, productQuantityOverridesArray)
                {
                    var div = document.createElement("div");
                    div.className = "row";


                    var paragraph = document.createElement("p");
                    paragraph.innerHTML =
                        "<strong>" + subscriptionPlanProduct.ProductName + "</strong>";
                    paragraph.style.textAlign = "right";
                    paragraph.className = "col-md-7";

                    div.appendChild(paragraph);

                    $("#productPanelBody"+divIndex).append(div);

                    return div;
                }

                //override button for each subscription product
                function createOverrideButton(overrideProductsButtonsArray, i, divIndex, nameAndOverrideButtonDiv)
                {
                    var overrideButton = document.createElement("button");
                    overrideButton.innerHTML = "Add product overrides";
                    overrideButton.className = "btn btn-success";
                    overrideButton.style.float = "right";
                    overrideButton.style.display = "inline";

                    overrideProductsButtonsArray[i] = overrideButton;

                    nameAndOverrideButtonDiv.appendChild(overrideButton);
                }

                //displays a subscription product's quantity and creates inputs for setting a new quantity
                function showSubscriptionProductQuantityAndOverride(subscriptionPlanProduct, productQuantityOverridesArray, index, divIndex)
                {
                    var div = document.createElement("div");
                    div.className = "row";

                    var paragraph = document.createElement("p");
                    paragraph.innerHTML = "<strong>Quantity: </strong>"  + subscriptionPlanProduct.Quantity;
                    paragraph.setAttribute('style', 'text-align:right; margin-left: 15em; margin-right: 3em; display: inline;');

                    var input = document.createElement("input");
                    input.placeholder = "Add Quantity Override";
                    input.style.paddingLeft = "1em";
                    input.style.visibility = "hidden";

                    div.appendChild(paragraph);
                    div.appendChild(input);
                    div.appendChild(document.createElement("br"));

                    $("#productPanelBody"+divIndex).append(div);

                    productQuantityOverridesArray[index] = input;
                }

                //displays a subscription product's price and creates inputs for setting a new price
                function showSubscriptionProductPriceAndOverride(subscriptionProduct, productPriceOverridesArray, index, divIndex)
                {
                    var div = document.createElement("div");
                    div.className = "row";

                    var paragraph = document.createElement("p");
                    var price = (subscriptionProduct.SubscriptionProductPriceOverride === null ) ? "<strong>Price:</strong> $"  + (subscriptionProduct.Amount / subscriptionProduct.Quantity)
                                                                                                 : "<strong>Price:</strong> $"  + subscriptionProduct.SubscriptionProductPriceOverride.ChargeAmount;
                    paragraph.innerHTML = price;

                    paragraph.setAttribute('style', 'text-align:right; margin-left: 16.5em; margin-right: 1.5em; display: inline;');
  

                    var input = document.createElement("input");
                    input.placeholder = "Add Price Override";
                    input.style.paddingLeft = "1em";
                    input.style.visibility = "hidden";


                    div.appendChild(paragraph);
                    div.appendChild(input);
                    div.appendChild(document.createElement("br"));
                    div.appendChild(document.createElement("br"));

                    $("#productPanelBody"+divIndex).append(div);
                    productPriceOverridesArray[index] = input;
                }

                // the override button created in createOverrideButton(...) to each subscription product's inputs for quantity and price
                function setOverrideButton(overrideProductsButtonsArray, productQuantityOverridesArray, productPriceOverridesArray, i)
                {
                    overrideProductsButtonsArray[i].onclick = function() {
                        if (this.innerHTML == "Add product overrides")
                        {
                            productQuantityOverridesArray[i].style.visibility = "visible";
                            productPriceOverridesArray[i].style.visibility = "visible";
                            this.innerHTML = "Remove product overrides";
                            this.style.backgroundColor = "red";
                        }
                        else
                        {
                            productQuantityOverridesArray[i].value = null;
                            productQuantityOverridesArray[i].style.visibility = "hidden";
                            productPriceOverridesArray[i].value = null;
                            productPriceOverridesArray[i].style.visibility = "hidden";
                            this.innerHTML = "Add product overrides";
                            this.style.backgroundColor = "green";
                        }
                    }
                }

        function showSubscriptionActionButtons(subscription,activateArray, provisionArray, buttonsArray, subscriptionID, divIndex)
        {
            //#region create Subscription Action panel, which doesn't exist for Cancelled subscriptions
            if (subscription.Status != "Cancelled")
            {
                var divPanel = document.createElement("div");
                divPanel.className = "panel panel-primary col-xs-12";

                var h3PanelHeader = document.createElement("h3");
                h3PanelHeader.innerHTML = "Subscription Actions";
                h3PanelHeader.className  = "panel-title panel-heading";

                var panelBody = document.createElement("div");
                panelBody.className = "panel-body";
                panelBody.id = "actionPanelBody" + divIndex;


                divPanel.appendChild(h3PanelHeader);
                divPanel.appendChild(panelBody);
                $("#subscriptionComponentDiv"+divIndex).append(divPanel);
            }
            //#endregion

            //#region create buttons
            //Buttons: update, cancel, delete, provision, and activate
            if(subscription.Status == "Active")
            {
                buttonsArray[0] = createButton(subscription, "Update", subscriptionID, onUpdateButton, 0, divIndex, "col-md-2 btn btn-info");
                buttonsArray[3] = createButton(subscription, "Cancel", subscriptionID, onCancelButton,3,divIndex, "col-md-2 btn btn-default");
            }
            else if(subscription.Status == "Provisioning")
            {
                buttonsArray[0] = createButton(subscription, "Update", subscriptionID, onUpdateButton, 0, divIndex, "col-md-2 btn btn-info");
                buttonsArray[1] = createActivateOrProvisionButton(subscription, "Activate", activateArray, subscriptionID, onActivateButton, 1,divIndex, "col-md-2", "btn btn-success col-md-12");
                buttonsArray[3] = createButton(subscription, "Cancel", subscriptionID, onCancelButton,3,divIndex, "col-md-2 btn btn-default");
            }
            else if (subscription.Status == "Draft")
            {
                buttonsArray[0] = createButton(subscription, "Update", subscriptionID, onUpdateButton, 0, divIndex, "col-md-2 btn btn-info");
                buttonsArray[1] = createActivateOrProvisionButton(subscription, "Activate", activateArray, subscriptionID, onActivateButton, 1,divIndex, "col-md-2","btn btn-success col-md-12");
                buttonsArray[2] = createActivateOrProvisionButton(subscription, "Provision", provisionArray, subscriptionID, onProvisionButton, 2,divIndex, "col-md-2", "btn btn-warning col-md-12");
                buttonsArray[4] = createButton(subscription, "Delete", subscriptionID, onDeleteButton,4,divIndex, "col-md-2 btn btn-danger");
            }
            //#endregion
        }


        //=================== EVENT FUNCTIONS ======================//
        //each function, except for onUpdateButton(...) calls either postAjax(...) or postProvisionOrActivateAjax(...) with the url to post to
        function onDeleteButton(subID)
        {
            postAjax(subID, "Subscriptions/DeleteSubscription");
        }

        function onProvisionButton(subID, subscriptionProvisionInput)
        {
            postProvisionOrActivateAjax(subID, subscriptionProvisionInput, "Subscriptions/ProvisionSubscription");
        }

        function onActivateButton(subID, subscriptionActivateInput)
        {
            postProvisionOrActivateAjax(subID, subscriptionActivateInput, "Subscriptions/ActivateSubscription");
        }

        function onCancelButton(subID)
        {
            postAjax(subID, "Subscriptions/CancelSubscription");
        }

        function onUpdateButton(subID)
        {
            //locate the subscription array that we use in the global "subscriptionsArray"
            var subscriptionToUpdate = subscriptionsArray[subID.toString()];

            //these array stores the int values of each product's quantity and price overrides, and subscription overrides, and will be passed to the controller
            var productQuantityOverridesValues = new Array();
            var productPriceOverridesValues = new Array();

            //place each input's value from the productQuantityOverrides and productPriceOverrides array into the two arrays instantiated above
            for (var i = 0; i < subscriptionToUpdate["productQuantityOverrides"].length; i++)
            {
                productQuantityOverridesValues[i] = subscriptionToUpdate["productQuantityOverrides"][i].value;
                productPriceOverridesValues[i] = subscriptionToUpdate["productPriceOverrides"][i].value;
            }

            //place each input's value from subscriptionOverrides to subscriptionOverridesValue
            var subscriptionOverridesValues = new Array();
            for (var i = 0; i < subscriptionToUpdate["subscriptionOverrides"].length; i++)
            {
                subscriptionOverridesValues[i] = subscriptionToUpdate["subscriptionOverrides"][i].value;
            }

            //place each input's value from timestamps to timestampsValues
            var timestampsValues = new Array();
            for (var i = 0; i < subscriptionToUpdate["timestamps"].length; i++)
            {
                timestampsValues[i] = subscriptionToUpdate["timestamps"][i].value;
            }


            var postSubscription = {
                SubscriptionID : subID,
                ProductQuantityOverrides : productQuantityOverridesValues,
                ProductPriceOverrides : productPriceOverridesValues,
                NameOverride: subscriptionOverridesValues[0],
                DescriptionOverride: subscriptionOverridesValues[1],
                ContractStartTimestamp:  timestampsValues[0],
                ContractEndTimestamp: timestampsValues[1],
                ScheduledActivationTimestamp : timestampsValues[2],
                Reference : subscriptionToUpdate["reference"][0].value,
                RemainingInterval : subscriptionToUpdate["remainingInterval"][0].value
            };


            $.ajax( {
                dataType : 'json',
                type: "POST",
                traditional: true,
                url: "Subscriptions/UpdateSubscription",
                data: postSubscription,
                success: function() {
                    $("#"+cusID).trigger("click");
                }
            });
        }

        //=================== HELPER FUNCTIONS =====================//

        //creates paragraphs and inputs
        function createStandardParagraph(innerHtml, divIndex)
        {
            var paragraph = document.createElement("p");
                paragraph.innerHTML = innerHtml ;
                $("#informationPanelBody"+divIndex).append(paragraph);
                return paragraph;
        }

        function createParagraphWithLineheight(innerHtml, lineHeight, divIndex)
        {
            var paragraph = createStandardParagraph(innerHtml, divIndex);
            paragraph.style.lineHeight = lineHeight;
        }
        
        function createParagraphWithSpecialMargin(innerHtml, status, marginLeft, divIndex)
        {
            var paragraph = createStandardParagraph(innerHtml, divIndex);
            if (status != "Cancelled")  {  paragraph.style.marginLeft = "15em";   }
        }

        function createParagraphWithSpecialMarginAndLineheight(innerHtml, status, marginLeft, lineHeight, divIndex)
        {
            var paragraph = createStandardParagraph(innerHtml, divIndex);
                paragraph.style.lineHeight = lineHeight;
            if (status != "Cancelled")  { paragraph.style.marginLeft = marginLeft; }
        }
      
        function createStandardInput(placeholder, visibility, overridesArray, index, divIndex, status)
        {
            //Only create an input if the subscription's status is not cancelled because cancelled subscriptions cannot have overriden fields
            if (status != "Cancelled")
            {
                var input = document.createElement("input");
                input.placeholder = placeholder;
                input.style.visibility = visibility;
                $("#informationPanelBody"+divIndex).append(input);
                overridesArray[index] = input;
                return input;
            }
        }

        function createDatepickerInput(placeholder, visibility, overridesArray, index, inputId, divIndex)
        {
            var input = createStandardInput(placeholder, visibility, overridesArray, index, divIndex);   
            input.id = inputId;
        }

 
        //creates activation or provision buttons
        function createActivateOrProvisionButton(subscription, innerHtml, activateOrProvisionArray, subscriptionId, clickFunction, index, divIndex, classSizeNames, classButtonNames)
        {
            var div = document.createElement("div");
            div.className = classSizeNames ;
            //set div attribute
            $("#actionPanelBody"+divIndex).append(div);

            var button = document.createElement("button");
            button.innerHTML = innerHtml;
            button.className = classButtonNames;
            button.id = subscriptionId + "_" + index;
            div.appendChild(button);

            div.appendChild(document.createElement("br"));
            div.appendChild(document.createElement("br"));
            var day = document.createElement("input");
            //day placeholder 
            day.className = "col-md-12";
            div.appendChild(day);
            activateOrProvisionArray[0] = day;


            div.appendChild(document.createElement("br"));
            var month = document.createElement("input");
            //month place holder
            month.className = "col-md-12";
            div.appendChild(month);
            activateOrProvisionArray[1] = month;

            $("#"+button.id).on("click", function() {
                clickFunction(subscriptionId, activateOrProvisionArray);
            });

            if (innerHtml == "Activate")
            {
                div.setAttribute('style', 'background-color: green; margin-left: 1em; border-radius: 5px; padding-bottom: 0.5em');
 
                day.placeholder = "Activation Day";
                month.placeholder = "Activation Month";    
            }
            else if (innerHtml == "Provision" && !(subscription.ScheduledActivationTimestamp === null))
            {
                div.setAttribute('style', 'background-color: #E9BC36; margin-left: 1em; border-radius: 5px; padding-bottom: 0.5em;');

                day.placeholder = "Provision date";
                month.placeholder = "Provision month";
            } 
            else if (innerHtml == "Provision" && subscription.ScheduledActivationTimestamp === null)
            {
                div.style.display = "none";
            }
            return button;
        }

        //creates update, cancel, or delete buttons
        function createButton(subscription, innerHtml, subscriptionId, clickFunction, index, divIndex, classNames)
        {
            var button = document.createElement("button");
            button.innerHTML = innerHtml;
            button.className = classNames;
            button.id = subscriptionId + "_" + index;
            if (button.innerHTML == "Cancel" || button.innerHTML == "Delete")
            {
                button.style.float = "right";
            }
            $("#actionPanelBody"+divIndex).append(button)


            $("#"+button.id).on("click", function() {
                //alert("The button was clicked");

                clickFunction(subscriptionId);
            });


            return button;
        }

        function postAjax(subID, controllerUrl)
        {
            var subscription = { SubscriptionID: subID };

            $.ajax({
                type: "POST",
                url: controllerUrl,
                dataType: "json",
                data: subscription,
                success: function() {
                    $("#"+cusID).trigger("click");
                }
            });
        }

        function postProvisionOrActivateAjax(subID, subscriptionInputs, controllerUrl)
        {
            //make a list that conbtains the input values, and pass it to the controller
            var subscriptionInputsValues = new Array(subscriptionInputs.length);
            for (var i = 0; i < activateInputCount; i++)
            {
                subscriptionInputsValues[i] = subscriptionInputs[i].value;
            }

            var subscription = { SubscriptionID: subID,
                InputValuesForActivationAndProvision : subscriptionInputsValues };

            $.ajax({
                type: "POST",
                url: controllerUrl,
                dataType: "json",
                data: subscription,
                traditional: true,
                success: function(){
                    $("#"+cusID).trigger("click");
                }
            });
        }

    </script>
</body>
</html>